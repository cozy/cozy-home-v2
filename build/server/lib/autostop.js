// Generated by CoffeeScript 1.9.0
var AppManager, Application, MINUTE, applicationTimeout, async, log;

async = require('async');

log = require('printit')({
  prefix: 'lib:auto-stop'
});

Application = require('../models/application');

AppManager = require("../lib/paas").AppManager;

applicationTimeout = [];

MINUTE = 60 * 1000;


/*
Mark application broken
   * Update application state in database
 */

module.exports.markBroken = function(app, err) {
  var data;
  data = {
    state: "broken",
    password: null,
    errormsg: err.message
  };
  return app.updateAttributes(data, function(saveErr) {
    if (saveErr != null) {
      return log.error(saveErr);
    }
  });
};


/*
Stop application <app> :
   * Stop process (via controller)
   * Update application state in database
   * Reset proxy routes
 */

module.exports.stopApp = function(app) {
  var manager;
  manager = new AppManager;
  return async.series({
    stop: function(next) {
      return manager.stop(app, next);
    },
    update: function(next) {
      return app.updateAttributes({
        state: "stopped",
        port: 0
      }, next);
    },
    reset: function(next) {
      return manager.resetProxy(next);
    }
  }, function(err) {
    if (err != null) {
      return module.exports.markBroken(app, err);
    }
  });
};


/*
Start timeout for application other than proxy and home
    * After 5 minutes of inactivity, application are stopped
    if application is stoppable.
 */

module.exports.startTimeout = function(slug) {
  if (slug !== 'home' && slug !== 'proxy') {
    return applicationTimeout[slug] = setTimeout(function() {
      return Application.all({
        key: slug
      }, function(err, apps) {
        var app;
        if (err != null) {
          return log.error(err);
        }
        if (!((apps != null ? apps.length : void 0) > 0)) {
          return log.error("App " + slug + " not found");
        }
        app = apps[0];
        if (app.isStoppable && app.state === "installed") {
          log.info("stopping " + slug);
          return module.exports.stopApp(app);
        }
      });
    }, 5 * MINUTE);
  }
};


/*
Restart tiemout for application.
    * Remove old timeout if it exists
    * Start new timeout
 */

module.exports.restartTimeout = function(slug) {
  if (applicationTimeout[slug] != null) {
    clearTimeout(applicationTimeout[slug]);
    delete applicationTimeout[slug];
  }
  return module.exports.startTimeout(slug);
};


/*
Init timeout
    When home is started, it start timeout for all installed application
 */

module.exports.init = function(callback) {
  if (callback == null) {
    callback = function() {};
  }
  return Application.all(function(err, apps) {
    var app, _i, _len;
    if (err != null) {
      log.error(err);
      return callback(err);
    } else {
      for (_i = 0, _len = apps.length; _i < _len; _i++) {
        app = apps[_i];
        if (app.state === 'installed' && app.isStoppable) {
          module.exports.startTimeout(app.slug);
        }
      }
      return callback();
    }
  });
};

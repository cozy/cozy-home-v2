// Generated by CoffeeScript 1.9.0
var AlarmManager, Application, CozyInstance, Notification, NotificationsHelper, RealtimeAdapter, User, async, autostop, localization, notifhelper;

async = require('async');

NotificationsHelper = require('cozy-notifications-helper');

RealtimeAdapter = require('cozy-realtime-adapter');

autostop = require('../lib/autostop');

AlarmManager = require('../lib/alarm_manager');

localization = require('../lib/localization_manager');

User = require('../models/user');

CozyInstance = require('../models/cozyinstance');

Application = require('../models/application');

Notification = require('../models/notification');

notifhelper = new NotificationsHelper('home');

module.exports = function(app, callback) {
  var eventsToForward, realtime;
  eventsToForward = ['notification.*', 'application.*', 'device.*'];
  realtime = RealtimeAdapter(app.server, eventsToForward);
  realtime.on('application.update', function(event, id) {
    return Application.find(id, function(err, app) {
      var message, messageKey;
      if (err) {
        return console.log(err.stack);
      }
      switch (app.state) {
        case 'broken':
          messageKey = 'installation message failure';
          message = localization.t(messageKey, {
            appName: app.name
          });
          return notifhelper.createTemporary({
            text: message,
            resource: {
              app: 'home'
            }
          });
      }
    });
  });
  realtime.on('usage.application', function(event, name) {
    if (name !== 'home' && name !== 'proxy') {
      return autostop.restartTimeout(name);
    }
  });
  return User.all(function(err, users) {
    var alarmManager, options, user;
    if ((err != null) || users.length === 0) {
      console.info("Internal server error. Can't retrieve users or " + "no user exists.");
    } else {
      user = users[0];
      options = {
        timezone: user.timezone,
        notificationHelper: notifhelper
      };
      alarmManager = new AlarmManager(options);
      app.alarmManager = alarmManager;
      realtime.on('event.*', alarmManager.handleAlarm);
    }
    return callback();
  });
};

// Generated by CoffeeScript 1.7.1
var Application, Manifest, americano, printit;

americano = require('americano-cozy');

printit = require('printit');

Manifest = require('../lib/manifest').Manifest;

module.exports = Application = americano.getModel('Application', {
  name: String,
  displayName: String,
  description: String,
  slug: String,
  state: String,
  isStoppable: {
    type: Boolean,
    "default": false
  },
  date: {
    type: Date,
    "default": Date.now
  },
  icon: String,
  git: String,
  errormsg: String,
  branch: String,
  port: Number,
  permissions: Object,
  password: String,
  homeposition: Object,
  widget: String,
  version: String,
  needsUpdate: {
    type: Boolean,
    "default": false
  },
  _attachments: Object
});

Application.all = function(params, callback) {
  return Application.request("bySlug", params, callback);
};

Application.destroyAll = function(params, callback) {
  return Application.requestDestroy("all", params, callback);
};

Application.prototype.checkForUpdate = function(cb) {
  var manifest, setFlag;
  setFlag = (function(_this) {
    return function() {
      _this.needsUpdate = true;
      _this.save(function(ers) {
        if (ers) {
          cb("Error when setting the needsUpdate flag: " + ers);
          return;
        }
        cb(null, true);
      });
    };
  })(this);
  if (this.needsUpdate) {
    cb(null, false);
    return;
  }
  manifest = new Manifest();
  manifest.download(this, (function(_this) {
    return function(erm) {
      var repoVersion;
      if (erm) {
        cb("Error when downloading manifest: " + erm);
        return;
      }
      repoVersion = manifest.getVersion();
      if (repoVersion == null) {
        cb(null, false);
        return;
      }
      if (_this.version == null) {
        setFlag();
        return;
      }
      if (_this.version !== repoVersion) {
        setFlag();
        return;
      }
      cb(null, false);
    };
  })(this));
  return this;
};

Application.prototype.getHaibuDescriptor = function() {
  var descriptor;
  descriptor = {
    user: this.slug,
    name: this.slug,
    domain: "127.0.0.1",
    repository: {
      type: "git",
      url: this.git
    },
    scripts: {
      start: "server.coffee"
    },
    password: this.password
  };
  if ((this.branch != null) && this.branch !== "null") {
    descriptor.repository.branch = this.branch;
  }
  return descriptor;
};

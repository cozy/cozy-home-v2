// Generated by CoffeeScript 1.10.0
var Photo, app, doPipe, downloader;

Photo = require('../models/photo');

downloader = require('../helpers/downloader');

app = null;

module.exports.setApp = function(ref) {
  return app = ref;
};

module.exports.fetch = function(req, res, next, id) {
  if (id.indexOf('.jpg') > 0) {
    id = id.substring(0, id.length - 4);
  }
  return Photo.find(id, (function(_this) {
    return function(err, photo) {
      if (err) {
        return next(err);
      } else if (!photo) {
        return next(NotFound("Photo " + id));
      } else {
        req.photo = photo;
        return next();
      }
    };
  })(this));
};

doPipe = function(req, which, download, res, next) {
  var binaryPath, disposition, onError, ref1, ref2, request;
  if (download) {
    disposition = 'attachment; filename=' + req.photo.title;
    res.setHeader('Content-disposition', disposition);
  }
  onError = function(err) {
    if (err) {
      return next(err);
    }
  };
  if ((ref1 = req.photo._attachments) != null ? ref1[which] : void 0) {
    binaryPath = "/data/" + req.photo.id + "/attachments/" + which;
    return request = downloader.download(binaryPath, function(stream) {
      if (stream.statusCode === 200) {
        res.on('close', function() {
          return request.abort();
        });
        return stream.pipe(res);
      } else {
        return res.sendfile('./server/img/error.gif');
      }
    });
  } else if ((ref2 = req.photo.binary) != null ? ref2[which] : void 0) {
    binaryPath = "/data/" + req.photo.id + "/binaries/" + which;
    return request = downloader.download(binaryPath, function(stream) {
      if (stream.statusCode === 200) {
        res.on('close', function() {
          return request.abort();
        });
        return stream.pipe(res);
      } else {
        return res.sendfile('./server/img/error.gif');
      }
    });
  } else {
    return res.sendfile('./server/img/error.gif');
  }
};

module.exports.thumb = function(req, res, next) {
  return doPipe(req, 'thumb', false, res, next);
};

module.exports.raw = function(req, res, next) {
  var ref1, ref2, ref3, which;
  which = ((ref1 = req.photo._attachments) != null ? ref1.raw : void 0) ? 'raw' : ((ref2 = req.photo.binary) != null ? ref2.raw : void 0) ? 'raw' : ((ref3 = req.photo.binary) != null ? ref3.file : void 0) ? 'file' : 'file';
  return doPipe(req, which, true, res, next);
};

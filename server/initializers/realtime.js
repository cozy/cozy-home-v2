// Generated by CoffeeScript 1.6.3
var Alarm, AlarmManager, AppManager, Application, Notification, NotificationsHelper, RealtimeAdapter, User, applicationTimeout, mark_broken, notifhelper, stop_app;

NotificationsHelper = require('cozy-notifications-helper');

RealtimeAdapter = require('cozy-realtime-adapter');

AppManager = require("../lib/paas").AppManager;

AlarmManager = require('../lib/alarm_manager');

User = require('../models/user');

Alarm = require('../models/alarm');

Application = require('../models/application');

Notification = require('../models/notification');

mark_broken = function(app, err) {
  app.state = "broken";
  app.password = null;
  app.errormsg = err.message;
  return app.save(function(saveErr) {
    if (saveErr) {
      return send_error(saveErr);
    }
  });
};

stop_app = function(app) {
  var manager,
    _this = this;
  manager = new AppManager;
  return manager.stop(app, function(err, result) {
    var data;
    if (err) {
      return mark_broken(app, err);
    }
    data = {
      state: "stopped",
      port: 0
    };
    return app.updateAttributes(data, function(err) {
      if (err) {
        return send_error(err);
      }
      return manager.resetProxy(function(err) {
        if (err) {
          return mark_broken(app, err);
        }
      });
    });
  });
};

applicationTimeout = [];

notifhelper = new NotificationsHelper('home');

module.exports = function(app) {
  var realtime;
  realtime = RealtimeAdapter(app, ['notification.*', 'application.*']);
  realtime.on('application.update', function(event, id) {
    return Application.find(id, function(err, app) {
      if (err) {
        return console.log(err.stack);
      }
      switch (app.state) {
        case 'broken':
          return notifhelper.createTemporary({
            text: "" + app.name + "'s installation failled.",
            resource: {
              app: 'home'
            }
          });
      }
    });
  });
  realtime.on('usage.application', function(event, name) {
    if (applicationTimeout[name] != null) {
      clearTimeout(applicationTimeout[name]);
    }
    return applicationTimeout[name] = setTimeout(function() {
      console.log("stop : " + name);
      if (name !== "home" && name !== "proxy") {
        return Application.all(function(err, apps) {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = apps.length; _i < _len; _i++) {
            app = apps[_i];
            if (app.name === name && app.isStoppable) {
              _results.push(stop_app(app));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
      }
    }, 900000);
  });
  return User.all(function(err, users) {
    var alarmManager, timezone;
    if ((err != null) || users.length === 0) {
      return console.info("Internal server error. Can't retrieve users or no user exists.");
    } else {
      timezone = users[0].timezone;
      alarmManager = new AlarmManager(timezone, Alarm, notifhelper);
      app.alarmManager = alarmManager;
      return realtime.on('alarm.*', alarmManager.handleAlarm);
    }
  });
};

// Generated by CoffeeScript 1.9.1
(function() {
  var CozySocketListener, global,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CozySocketListener = (function() {
    CozySocketListener.prototype.models = {};

    CozySocketListener.prototype.events = [];

    CozySocketListener.prototype.shouldFetchCreated = function(id) {
      return true;
    };

    CozySocketListener.prototype.onRemoteCreate = function(model) {};

    CozySocketListener.prototype.onRemoteUpdate = function(model, collection) {};

    CozySocketListener.prototype.onRemoteDelete = function(model, collection) {};

    function CozySocketListener() {
      this.processStack = bind(this.processStack, this);
      this.callbackFactory = bind(this.callbackFactory, this);
      this.resume = bind(this.resume, this);
      this.pause = bind(this.pause, this);
      var err;
      try {
        this.connect();
      } catch (_error) {
        err = _error;
        console.log("Error while connecting to socket.io");
        console.log(err.stack);
      }
      this.collections = [];
      this.singlemodels = new Backbone.Collection();
      this.stack = [];
      this.ignore = [];
      this.paused = 0;
    }

    CozySocketListener.prototype.connect = function() {
      var event, j, len, pathToSocketIO, ref, results, url;
      url = window.location.origin;
      pathToSocketIO = "/" + (window.location.pathname.substring(1)) + "socket.io";
      this.socket = io(url, {
        path: pathToSocketIO,
        reconnectionDelayMax: 60000,
        reconectionDelay: 2000,
        reconnectionAttempts: 3
      });
      ref = this.events;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        event = ref[j];
        results.push(this.socket.on(event, this.callbackFactory(event)));
      }
      return results;
    };

    CozySocketListener.prototype.watch = function(collection) {
      if (this.collections.length === 0) {
        this.collection = collection;
      }
      this.collections.push(collection);
      collection.socketListener = this;
      return this.watchOne(collection);
    };

    CozySocketListener.prototype.stopWatching = function(toRemove) {
      var collection, i, j, len, ref;
      ref = this.collections;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        collection = ref[i];
        if (collection === toRemove) {
          return this.collections.splice(i, 1);
        }
      }
    };

    CozySocketListener.prototype.watchOne = function(model) {
      this.singlemodels.add(model);
      model.on('request', this.pause);
      model.on('sync', this.resume);
      model.on('destroy', this.resume);
      return model.on('error', this.resume);
    };

    CozySocketListener.prototype.pause = function(model, xhr, options) {
      var doctype, operation;
      if (options.ignoreMySocketNotification) {
        operation = model.isNew() ? 'create' : 'update';
        doctype = this.getDoctypeOf(model);
        if (doctype == null) {
          return;
        }
        this.ignore.push({
          doctype: doctype,
          operation: operation,
          model: model
        });
        return this.paused = this.paused + 1;
      }
    };

    CozySocketListener.prototype.resume = function(model, resp, options) {
      if (options.ignoreMySocketNotification) {
        this.paused = this.paused - 1;
        if (this.paused <= 0) {
          this.processStack();
          return this.paused = 0;
        }
      }
    };

    CozySocketListener.prototype.getDoctypeOf = function(model) {
      var Model, key, ref;
      ref = this.models;
      for (key in ref) {
        Model = ref[key];
        if (model instanceof Model) {
          return key;
        }
      }
    };

    CozySocketListener.prototype.cleanStack = function() {
      var ignoreEvent, ignoreIndex, removed, results, stackEvent, stackIndex;
      ignoreIndex = 0;
      results = [];
      while (ignoreIndex < this.ignore.length) {
        removed = false;
        stackIndex = 0;
        ignoreEvent = this.ignore[ignoreIndex];
        while (stackIndex < this.stack.length) {
          stackEvent = this.stack[stackIndex];
          if (stackEvent.operation === ignoreEvent.operation && stackEvent.id === ignoreEvent.model.id) {
            this.stack.splice(stackIndex, 1);
            removed = true;
            break;
          } else {
            stackIndex++;
          }
        }
        if (removed) {
          results.push(this.ignore.splice(ignoreIndex, 1));
        } else {
          results.push(ignoreIndex++);
        }
      }
      return results;
    };

    CozySocketListener.prototype.callbackFactory = function(event) {
      return (function(_this) {
        return function(id) {
          var doctype, fullevent, operation, ref;
          ref = event.split('.'), doctype = ref[0], operation = ref[1];
          fullevent = {
            id: id,
            doctype: doctype,
            operation: operation
          };
          _this.stack.push(fullevent);
          if (_this.paused === 0) {
            return _this.processStack();
          }
        };
      })(this);
    };

    CozySocketListener.prototype.processStack = function() {
      var results;
      this.cleanStack();
      results = [];
      while (this.stack.length > 0) {
        results.push(this.process(this.stack.shift()));
      }
      return results;
    };

    CozySocketListener.prototype.process = function(event) {
      var doctype, id, model, operation;
      doctype = event.doctype, operation = event.operation, id = event.id;
      switch (operation) {
        case 'create':
          if (!this.shouldFetchCreated(id)) {
            return;
          }
          model = new this.models[doctype]({
            id: id
          });
          return model.fetch({
            success: (function(_this) {
              return function(fetched) {
                return _this.onRemoteCreate(fetched);
              };
            })(this)
          });
        case 'update':
          if (model = this.singlemodels.get(id)) {
            model.fetch({
              success: (function(_this) {
                return function(fetched) {
                  if (fetched.changedAttributes()) {
                    return _this.onRemoteUpdate(fetched, null);
                  }
                };
              })(this)
            });
          }
          return this.collections.forEach((function(_this) {
            return function(collection) {
              if (!(model = collection.get(id))) {
                return;
              }
              return model.fetch({
                success: function(fetched) {
                  if (fetched.changedAttributes()) {
                    return _this.onRemoteUpdate(fetched, collection);
                  }
                }
              });
            };
          })(this));
        case 'delete':
          if (model = this.singlemodels.get(id)) {
            this.onRemoteDelete(model, this.singlemodels);
          }
          return this.collections.forEach((function(_this) {
            return function(collection) {
              if (!(model = collection.get(id))) {
                return;
              }
              return _this.onRemoteDelete(model, collection);
            };
          })(this));
      }
    };

    return CozySocketListener;

  })();

  global = (typeof module !== "undefined" && module !== null ? module.exports : void 0) || window;

  global.CozySocketListener = CozySocketListener;

}).call(this);
